// A simple personal AI assistant web app using GPT-4 and text-to-speech with voice input
// Includes: hotword detection ("Hey Nashi") and visual mic status

import React, { useState, useEffect, useRef } from "react";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import backgroundImage from "/mnt/data/Untitled.png";

const ASSISTANT_NAME = "Nashi";
const PERSONALITY = "You are Nashi, a Gen Z AI assistant with a funny and casual vibe. You speak with upbeat Gen Z slang, use witty comebacks, light sarcasm, and crack jokes when it's appropriate. Keep things fun but still helpful. Use terms like 'bet', 'slay', 'fr', 'lowkey', 'highkey', 'no cap', and sprinkle in emojis or memes references if they add humor.";

export default function AIAssistant() {
  const [input, setInput] = useState("");
  const [conversation, setConversation] = useState([]);
  const [loading, setLoading] = useState(false);
  const [theme, setTheme] = useState("dark");
  const [speaking, setSpeaking] = useState(false);
  const [listening, setListening] = useState(false);
  const backgroundRef = useRef(null);
  const recognitionRef = useRef(null);
  const silenceTimer = useRef(null);
  const wakewordMode = useRef(true);

  useEffect(() => {
    const style = document.createElement("style");
    style.innerHTML = `
      @keyframes animatedBackground {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
      }
      @keyframes pulseBackground {
        0% { filter: brightness(1); }
        50% { filter: brightness(1.3); }
        100% { filter: brightness(1); }
      }
      .mic-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        background-color: red;
        animation: blink 1s infinite;
      }
      .mic-indicator.active {
        background-color: #0f0;
      }
      @keyframes blink {
        0% { opacity: 1; }
        50% { opacity: 0.4; }
        100% { opacity: 1; }
      }
    `;
    document.head.appendChild(style);
    return () => document.head.removeChild(style);
  }, []);

  useEffect(() => {
    if (!('webkitSpeechRecognition' in window)) return;
    const SpeechRecognition = window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'en-US';

    recognition.onstart = () => setListening(true);
    recognition.onend = () => setListening(false);

    recognition.onresult = (event) => {
      let transcript = "";
      for (let i = event.resultIndex; i < event.results.length; i++) {
        transcript += event.results[i][0].transcript;
      }

      if (wakewordMode.current) {
        if (transcript.toLowerCase().includes("hey nashi")) {
          wakewordMode.current = false;
          setInput("");
          startListening();
        }
      } else {
        setInput(transcript);
        clearTimeout(silenceTimer.current);
        silenceTimer.current = setTimeout(() => {
          recognition.stop();
          sendMessage();
          wakewordMode.current = true;
        }, 2000);
      }
    };

    recognitionRef.current = recognition;
    recognition.start(); // always listening for wakeword
  }, []);

  function startListening() {
    recognitionRef.current?.stop();
    setTimeout(() => recognitionRef.current?.start(), 200);
  }

  async function sendMessage() {
    if (!input.trim()) return;
    const userMessage = { role: "user", content: input };
    const updatedConversation = [...conversation, userMessage];
    setConversation(updatedConversation);
    setInput("");
    setLoading(true);

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer YOUR_OPENAI_API_KEY`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: PERSONALITY },
          ...updatedConversation
        ]
      })
    });

    const data = await response.json();
    const reply = data.choices?.[0]?.message?.content || "I'm not sure how to respond to that.";
    const assistantMessage = { role: "assistant", content: reply };
    setConversation([...updatedConversation, assistantMessage]);
    setLoading(false);
    speak(reply);
  }

  function speak(text) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.voice = speechSynthesis.getVoices().find(v => v.name.includes("Google UK English Male") || v.default);
    utterance.onstart = () => setSpeaking(true);
    utterance.onend = () => setSpeaking(false);
    speechSynthesis.speak(utterance);
  }

  const toggleTheme = () => {
    setTheme(prev => (prev === "dark" ? "light" : "dark"));
  };

  const themeClasses = theme === "dark" 
    ? "text-white" 
    : "text-black";

  const chatBg = theme === "dark" ? "bg-black bg-opacity-70" : "bg-white bg-opacity-80";

  const animationStyle = {
    backgroundImage: `url(${backgroundImage})`,
    backgroundSize: '200% 200%',
    backgroundPosition: '0% 50%',
    backgroundRepeat: 'no-repeat',
    animation: `${speaking ? 'pulseBackground' : 'animatedBackground'} 20s ease infinite`
  };

  return (
    <div 
      ref={backgroundRef}
      className={`min-h-screen p-6 ${themeClasses}`} 
      style={animationStyle}
    >
      <div className="max-w-2xl mx-auto space-y-4 backdrop-blur-md p-6 rounded-lg">
        <div className="flex justify-between items-center">
          <h1 className="text-3xl font-bold">{ASSISTANT_NAME}, Your AI Assistant</h1>
          <div className="space-x-2 flex items-center">
            <div className={`mic-indicator ${listening ? 'active' : ''}`}></div>
            <Button onClick={toggleTheme}>Toggle Theme</Button>
          </div>
        </div>
        <div className={`${chatBg} p-4 rounded-lg h-64 overflow-y-scroll`}>
          {conversation.map((msg, i) => (
            <div key={i} className="mb-2">
              <strong>{msg.role === "user" ? "You" : ASSISTANT_NAME}:</strong> {msg.content}
            </div>
          ))}
        </div>
        <Textarea
          placeholder="Ask a question..."
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="w-full"
        />
        <Button onClick={sendMessage} disabled={loading}>
          {loading ? "Thinking..." : "Send"}
        </Button>
      </div>
    </div>
  );
}
